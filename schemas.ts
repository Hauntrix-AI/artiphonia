// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const profilesRowSchema = z.object({
  avatar: z.string().optional().nullable(),
  bio: z.string().nullable(),
  first_name: z.string().nullable(),
  id: z.string(),
  last_name: z.string().nullable(),
});

export const profilesInsertSchema = z.object({
  avatar: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  first_name: z.string().optional().nullable(),
  id: z.string(),
  last_name: z.string().optional().nullable(),
});

export const profilesUpdateSchema = z.object({
  avatar: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  first_name: z.string().optional().nullable(),
  id: z.string().optional(),
  last_name: z.string().optional().nullable(),
});

export const profilesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("profiles_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const projectsRowSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().nullable(),
  id: z.string().optional(),
  name: z.string().nullable(),
  user_id: z.string().nullable(),
});

export const projectsInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const projectsUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const projectsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("projects_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);
